#! /usr/bin/env -S chez-scheme --script

;; Test script to help verify the correctness of the pure scheme implementation
;; against the installed libev shared lib.

;; It uses our FFI wrapper lib to see if the pure scheme implementation idea of libev
;; matches that of the real one.

;; Currently that's pretty broad, only struct size and public member offsets are checked.

(import
  (chezscheme)
  (ev ftypes-util))

;; #t show both success and error messages.
;; #f show only error messages.
(define verbose? #f)

(define load-lib
  (load-shared-object "ev/libchez-ffi.so"))

(define return-code 0)

(define-ftype ev-loop* void*)
(define-ftype ev-tstamp double)
;; pure.scm is autogenerated, see GNUmakefile.
(include "pure.scm")

(c-function
  [struct-stat-sizeof			()	size_t]
  )

(c-function
  [ev-io-sizeof				()	size_t]
  [ev-io-fd-offsetof			()	size_t]
  [ev-io-events-offsetof		()	size_t]
  [ev-timer-sizeof			()	size_t]
  [ev-timer-after-offsetof		()	size_t]
  [ev-timer-repeat-offsetof		()	size_t]
  [ev-periodic-sizeof			()	size_t]
  [ev-periodic-offset-offsetof		()	size_t]
  [ev-periodic-interval-offsetof	()	size_t]
  [ev-periodic-reschedule-cb-offsetof	()	size_t]
  [ev-signal-sizeof			()	size_t]
  [ev-signal-signum-offsetof		()	size_t]
  [ev-child-sizeof			()	size_t]
  [ev-child-trace-offsetof		()	size_t]
  [ev-child-pid-offsetof		()	size_t]
  [ev-child-rpid-offsetof		()	size_t]
  [ev-child-rstatus-offsetof		()	size_t]
  [ev-stat-sizeof			()	size_t]
  [ev-idle-sizeof			()	size_t]
  [ev-prepare-sizeof			()	size_t]
  [ev-check-sizeof			()	size_t]
  [ev-fork-sizeof			()	size_t]
  [ev-embed-sizeof			()	size_t]
  [ev-embed-other-offsetof		()	size_t]
  [ev-async-sizeof			()	size_t]
  )

(define-syntax test-sizeof
  (syntax-rules ()
    [(_ int c-sizeof)
     (let ([lhs int]
           [rhs (c-sizeof)])
       (cond
         [(= lhs rhs)
          (format verbose? "sizeof ~a scheme ~d == c ~d~n" 'int lhs rhs)]
         [else
           (format (current-error-port) "sizeof ~a scheme ~d != c ~d~n" 'int lhs rhs)
           (set! return-code 1)]))]))

(define-syntax test-ftype-sizeof
  (syntax-rules ()
    [(_ ev-t c-sizeof)
     (let ([lhs (ftype-sizeof ev-t)]
           [rhs (c-sizeof)])
       (cond
         [(= lhs rhs)
          (format verbose? "sizeof ~a scheme ~d == c ~d~n" 'ev-t lhs rhs)]
         [else
           (format (current-error-port) "sizeof ~a scheme ~d != c ~d~n" 'ev-t lhs rhs)
           (set! return-code 1)]))]))

(define-syntax test-offset
  (syntax-rules ()
    [(_ ev-t field c-offset)
     (let ([lhs (ftype-offsetof ev-t field)]
           [rhs (c-offset)])
       (cond
         [(= lhs rhs)
          (format verbose? "~a.~a scheme ~d == c ~d~n" 'ev-t 'field lhs rhs)]
         [else
           (format (current-error-port) "~a.~a scheme ~d != c ~d~n" 'ev-t 'field lhs rhs)
           (set! return-code 1)]))]))

(test-sizeof test:struct-stat-sizeof struct-stat-sizeof)
(test-ftype-sizeof ev-io-t ev-io-sizeof)
(test-ftype-sizeof ev-timer-t ev-timer-sizeof)
(test-ftype-sizeof ev-periodic-t ev-periodic-sizeof)
(test-ftype-sizeof ev-signal-t ev-signal-sizeof)
(test-ftype-sizeof ev-child-t ev-child-sizeof)
(test-ftype-sizeof ev-stat-t ev-stat-sizeof)
(test-ftype-sizeof ev-idle-t ev-idle-sizeof)
(test-ftype-sizeof ev-prepare-t ev-prepare-sizeof)
(test-ftype-sizeof ev-check-t ev-check-sizeof)
(test-ftype-sizeof ev-fork-t ev-fork-sizeof)
(test-ftype-sizeof ev-embed-t ev-embed-sizeof)
(test-ftype-sizeof ev-async-t ev-async-sizeof)

(test-offset ev-io-t fd ev-io-fd-offsetof)
(test-offset ev-io-t events ev-io-events-offsetof)
(test-offset ev-timer-t at ev-timer-after-offsetof)
(test-offset ev-timer-t repeat ev-timer-repeat-offsetof)
(test-offset ev-periodic-t offset ev-periodic-offset-offsetof)
(test-offset ev-periodic-t interval ev-periodic-interval-offsetof)
(test-offset ev-periodic-t reschedule-cb ev-periodic-reschedule-cb-offsetof)
(test-offset ev-signal-t signum ev-signal-signum-offsetof)
(test-offset ev-child-t flags ev-child-trace-offsetof)
(test-offset ev-child-t pid ev-child-pid-offsetof)
(test-offset ev-child-t rpid ev-child-rpid-offsetof)
(test-offset ev-child-t rstatus ev-child-rstatus-offsetof)
(test-offset ev-embed-t other ev-embed-other-offsetof)

(exit return-code)
